Fue desarrollado para escribir el "kernel" de UNIX.
Tiene funcionalidad de bajo y alto nivel.
Tiene manejo explícito de apuntadores.
No tiene recolector de basura. Se maneja explícitamente: #apuntador# malloc (se utiliza con sizeof); #eliminador de apuntador# free.
No utiliza multihilo (proceso liviano), sino que clona procesos (procesos pesados).

Extensión:
  .c ANSI C
  .cpp c++ o c#
  
librerías: {#include <name>}
constante: {#define Nombre valor}
variables globales: {int, float, char, long, short, ...}; ofrece arreglos y estructura
tipo: {main() {...
    instrucciones (while, do-while, for, break, continue, if ... then, switch, return)
    }
  }
  
Conversión de tipos es débil:
  real -> int (aplica piso)
  char -> int (convierte de entero a UNICODE)
  int -> char
  
Arreglos son definidos con tamaño estáticamente en tiempo de compilación. {int a[15]}
  Se utiliza malloc para crear nuevos arreglos y utilizar los apuntadores. El final de la lista tiene valor NULL.
  Cuando agregas un intermedio, el nuevo creado apunta al siguiente y luego se rompe el apuntador.
  
  Sintaxis:
    Declaración: {int *a;}
    Asignación de valor: {*a=3;}
    * := contenido de lo apuntado
    & := dirección de memoria de una celda
    
    En la memoria, existen espacios reservados para la pila (variables locales a subrutinas y que desaparecen) y heap.
    
Necesidad de Estructuras de Datos Dinámicas:
  C -> Tiene apuntadores gestionados manualmente con malloc/free
  C++ -> Es posible con new/delete
  En ambos no hay garbage collector.
  Ambos tienen apuntadores:
    Estructuras dinámicas
    Pase de parámetros con retorno.
      Al llamar una función o rutina, existen parámetros que cambian su valor y lo regresan (por referencia), mientras que existen otros que no regresan valor cambiado (por valor).
      {int a=2, b=2;
      A(a,b)
      void A(int &a[por referencia], int b[por valor])} #C++
      {int *a=2, b=2;
      A(&a,b)
      void A(int *c, int d)} #C
  Arreglo: Estructura de datos estáticas (define tamaño en tiempo de compilación). Su solución:
    C: listas enlazadas. Se define un tipo de datos homogéneo [struct]
      {struct Nombre { campos de estructura } }
      {typedef struct Nombre { campos de estructura } Nombre tipo; }
      
      { # Estructura estática
      typedef struct E {
        char nom[27];
        int ID;
        float salario;
        } Empleado;
        
        Empleado e;
        e.ID=123; # . es operador para acceder a campos de estructura
      }
      
      { # Estructura dinámica
      typedef struct L {
        int a;
        struct L *ptr;
        } LISTA;
        
        LISTA *p;
      } # Cuando se tienen apuntadores, no se utiliza . sino ->
      
    C++: librerías pero se pueden utilizar manualmente las listas de C.
