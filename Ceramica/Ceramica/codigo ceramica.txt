#include "GL/glut.h"

void init(void) {
	glClearColor(128, 128, 128, 0);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(0.0, 155.0, 0.0, 155.0);
	
}

//Conjunto de arreglos que trazan la secuencia de colores que llevará la cerámica.
int m1[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
int m2[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
int m3[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
int m4[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};

int m5[] = {1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1};
int m6[] = {1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,4,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1};
int m7[] = {1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,4,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1};
int m8[] = {1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,4,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1};
int m9[] = {1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,4,4,4,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1};

int m10[] = {1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,4,3,4,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1};
int m11[] = {1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,4,4,3,4,4,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1};
int m12[] = {1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,4,3,3,3,4,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1};
int m13[] = {1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,4,3,5,3,4,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1};
int m14[] = {1,1,1,1,2,2,2,3,3,3,3,3,3,3,2,2,2,2,2,2,1,4,4,3,5,3,4,4,1,2,2,2,2,2,2,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1};
int m15[] = {1,1,1,1,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,1,1,4,3,3,5,3,3,4,1,1,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,1,1,1,1,1};
int m16[] = {1,1,1,1,2,2,2,3,3,3,3,3,2,2,2,2,2,2,2,1,4,4,3,5,5,5,3,4,4,1,2,2,2,2,2,2,2,3,3,3,3,3,2,2,2,1,1,1,1,1};
int m17[] = {1,1,1,1,2,2,2,3,3,3,3,2,2,2,2,2,2,2,1,1,4,3,3,5,2,5,3,3,4,1,1,2,2,2,2,2,2,2,3,3,3,3,2,2,2,1,1,1,1,1};
int m18[] = {1,1,1,1,2,2,2,3,3,2,2,2,2,2,2,2,1,1,1,4,4,3,5,5,2,5,5,3,4,4,1,1,1,2,2,2,2,2,2,2,3,3,2,2,2,1,1,1,1,1};
int m19[] = {1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,4,4,3,3,5,2,2,2,5,3,3,4,4,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1};
int m20[] = {1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,4,4,4,3,3,5,5,2,2,2,5,5,3,3,4,4,4,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1};
int m21[] = {1,1,1,1,2,2,2,2,2,2,2,1,1,1,4,4,4,3,3,3,5,5,2,2,2,2,2,5,5,3,3,3,4,4,4,1,1,1,2,2,2,2,2,2,2,1,1,1,1,1};
int m22[] = {1,1,1,1,2,2,2,2,2,1,1,1,1,4,4,3,3,3,5,5,5,2,2,2,2,2,2,2,5,5,5,3,3,3,4,4,4,1,1,1,1,2,2,2,2,1,1,1,1,1};
int m23[] = {1,1,1,1,2,2,1,1,1,1,4,4,4,4,3,3,5,5,5,2,2,2,2,2,1,2,2,2,2,2,5,5,5,3,3,3,4,4,4,4,1,1,1,1,2,1,1,1,1,1};
int m24[] = {1,1,1,1,1,1,1,4,4,4,4,3,3,3,3,5,5,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,5,5,5,3,3,3,3,4,4,4,1,1,1,1,1,1,1,1};

int m25[] = {1,1,1,1,1,4,4,4,3,3,3,3,5,5,5,5,2,2,2,2,2,2,1,1,1,1,1,2,2,2,2,2,2,5,5,5,5,3,3,3,3,4,4,4,1,1,1,1,1,1};

int m26[] = { 1,1,1,1,1,1,1,4,4,4,4,3,3,3,3,5,5,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,5,5,5,3,3,3,3,4,4,4,1,1,1,1,1,1,1,1 };
int m27[] = { 1,1,1,1,2,2,1,1,1,1,4,4,4,4,3,3,5,5,5,2,2,2,2,2,1,2,2,2,2,2,5,5,5,3,3,3,4,4,4,4,1,1,1,1,2,1,1,1,1,1 };
int m28[] = { 1,1,1,1,2,2,2,2,2,1,1,1,1,4,4,3,3,3,5,5,5,2,2,2,2,2,2,2,5,5,5,3,3,3,4,4,4,1,1,1,1,2,2,2,2,1,1,1,1,1 };
int m29[] = { 1,1,1,1,2,2,2,2,2,2,2,1,1,1,4,4,4,3,3,3,5,5,2,2,2,2,2,5,5,3,3,3,4,4,4,1,1,1,2,2,2,2,2,2,2,1,1,1,1,1 };
int m30[] = { 1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,4,4,4,3,3,5,5,2,2,2,5,5,3,3,4,4,4,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1 };
int m31[] = { 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,4,4,3,3,5,2,2,2,5,3,3,4,4,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 };
int m32[] = { 1,1,1,1,2,2,2,3,3,2,2,2,2,2,2,2,1,1,1,4,4,3,5,5,2,5,5,3,4,4,1,1,1,2,2,2,2,2,2,2,3,3,2,2,2,1,1,1,1,1 };
int m33[] = { 1,1,1,1,2,2,2,3,3,3,3,2,2,2,2,2,2,2,1,1,4,3,3,5,2,5,3,3,4,1,1,2,2,2,2,2,2,2,3,3,3,3,2,2,2,1,1,1,1,1 };
int m34[] = { 1,1,1,1,2,2,2,3,3,3,3,3,2,2,2,2,2,2,2,1,4,4,3,5,5,5,3,4,4,1,2,2,2,2,2,2,2,3,3,3,3,3,2,2,2,1,1,1,1,1 };
int m35[] = { 1,1,1,1,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,1,1,4,3,3,5,3,3,4,1,1,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,1,1,1,1,1 };
int m36[] = { 1,1,1,1,2,2,2,3,3,3,3,3,3,3,2,2,2,2,2,2,1,4,4,3,5,3,4,4,1,2,2,2,2,2,2,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 };
int m37[] = { 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,4,3,5,3,4,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 };
int m38[] = { 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,4,3,3,3,4,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 };
int m39[] = { 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,4,4,3,4,4,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 };
int m40[] = { 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,4,3,4,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 };

int m41[] = { 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,4,4,4,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 };
int m42[] = { 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,4,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 };
int m43[] = { 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,4,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 };
int m44[] = { 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,4,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 };
int m45[] = { 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,4,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 };;
int m46[] = { 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 };
int m47[] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };
int m48[] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };
int m49[] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };
int m50[] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };


//Este método recibe como parámetros una arreglo de enteros y un múltiplo de 3. Con estos parámetros se decide que secuencia de colores pintar según el vaslor de cada casilla del arreglo
void secuencia(int arg[], int fila) {
	int i = 0;
	int valor;
	int alfa = 0;
	double x1 = 3.1;
	double x2 = 5.9;
	double y1 = 150.1;
	double y2 = 152.9;
	double cont = 0;

	while (i < 50) {
	valor = arg[i];
	switch (valor) {
	case 1:
		glBegin(GL_POLYGON);
		glColor3f(0.5, 0.5, 0.5);//GRIS
		glVertex2f(x1 + cont, y1 - fila);//A
		glVertex2f(x1 + cont, y2 - fila);//B

		glVertex2f(x1 + cont, y2 - fila);//B
		glVertex2f(x2 + cont, y2 - fila);//C

		glVertex2f(x2 + cont, y2 - fila);//C
		glVertex2f(x2 + cont, y1 - fila);//D

		glVertex2f(x2 + cont, y1 - fila);//D
		glVertex2f(x1 + cont, y1 - fila);//A
		glEnd();
		alfa++;
		cont = cont + 3;
		break;
	case 2:
		glBegin(GL_POLYGON);
		glColor3f(0.84, 0.84, 0.74);//CAFÉ
		glVertex2f(x1 + cont, y1 - fila);//A
		glVertex2f(x1 + cont, y2 - fila);//B

		glVertex2f(x1 + cont, y2 - fila);//B
		glVertex2f(x2 + cont, y2 - fila);//C

		glVertex2f(x2 + cont, y2 - fila);//C
		glVertex2f(x2 + cont, y1 - fila);//D

		glVertex2f(x2 + cont, y1 - fila);//D
		glVertex2f(x1 + cont, y1 - fila);//A
		glEnd();
		alfa++;
		cont = cont + 3;
		break;
	case 3:
		glBegin(GL_POLYGON);
		glColor3f(1, 0, 0);//ROJO
		glVertex2f(x1 + cont, y1 - fila);//A
		glVertex2f(x1 + cont, y2 - fila);//B

		glVertex2f(x1 + cont, y2 - fila);//B
		glVertex2f(x2 + cont, y2 - fila);//C

		glVertex2f(x2 + cont, y2 - fila);//C
		glVertex2f(x2 + cont, y1 - fila);//D

		glVertex2f(x2 + cont, y1 - fila);//D
		glVertex2f(x1 + cont, y1 - fila);//A
		glEnd();
		alfa++;
		cont = cont + 3;
		break;
	case 4:
		glBegin(GL_POLYGON);
		glColor3f(0, 0.3, 0);//VERDE
		glVertex2f(x1 + cont, y1 - fila);//A
		glVertex2f(x1 + cont, y2 - fila);//B

		glVertex2f(x1 + cont, y2 - fila);//B
		glVertex2f(x2 + cont, y2 - fila);//C

		glVertex2f(x2 + cont, y2 - fila);//C
		glVertex2f(x2 + cont, y1 - fila);//D

		glVertex2f(x2 + cont, y1 - fila);//D
		glVertex2f(x1 + cont, y1 - fila);//A
		glEnd();
		alfa++;
		cont = cont + 3;
		break;
	case 5:
		glBegin(GL_POLYGON);
		glColor3f(1, 0.5, 0);//NARANJA
		glVertex2f(x1 + cont, y1 - fila);//A
		glVertex2f(x1 + cont, y2 - fila);//B

		glVertex2f(x1 + cont, y2 - fila);//B
		glVertex2f(x2 + cont, y2 - fila);//C

		glVertex2f(x2 + cont, y2 - fila);//C
		glVertex2f(x2 + cont, y1 - fila);//D

		glVertex2f(x2 + cont, y1 - fila);//D
		glVertex2f(x1 + cont, y1 - fila);//A
		glEnd();
		alfa++;
		cont = cont + 3;
		break;
	}
	alfa = 0;
	i++;
	}
}

void lineSegment(void) {
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1, 1, 1);
	//Creamos una cuadrícula que servirá como apoyo y además división de la cerámica una vez terminado.
	glBegin(GL_LINES);
	int k = 0;
	int m = 0;
	while (k < 50) {//While que crea varias columnas de cuadrados
	int i = 0;
	int j = 0;
	while (i < 50) {//While que crea una columna de cuadrados
		glVertex2f(3 + m, 3 + j);
		glVertex2f(3 + m, 6 + j);

		glVertex2f(3 + m, 6 + j);
		glVertex2f(3 + m, 6 + j);

		glVertex2f(6 + m, 6 + j);
		glVertex2f(6 + m, 3 + j);

		glVertex2f(6 + m,  3 + j);
		glVertex2f(3 + m, 3 + j);

		j = j + 3;
		i++;
	}
	m = m + 3;
	k++;
}
	glVertex2f(3, 153);
	glVertex2f(153, 153);
	glEnd();

	//Mandamos a llamar al método secuencia, para que pinte la secuencia de colores según la matriz dada. Por cada llamada del método se pinta una línea.
	secuencia(m1, 0);
	secuencia(m2, 3);
	secuencia(m3, 6);
	secuencia(m4, 9);
	secuencia(m5, 12);
	secuencia(m6, 15);
	secuencia(m7, 18);
	secuencia(m8, 21);
	secuencia(m9, 24);
	secuencia(m10, 27);
	secuencia(m11, 30);
	secuencia(m12, 33);
	secuencia(m13, 36);
	secuencia(m14, 39);
	secuencia(m15, 42);
	secuencia(m16, 45);
	secuencia(m17, 48);
	secuencia(m18, 51);
	secuencia(m19, 54);
	secuencia(m20, 57);
	secuencia(m21, 60);
	secuencia(m22, 63);
	secuencia(m23, 66);
	secuencia(m24, 69);
	secuencia(m25, 72);

	secuencia(m26, 75);
	secuencia(m27, 78);
	secuencia(m28, 81);
	secuencia(m29, 84);
	secuencia(m30, 87);
	secuencia(m31, 90);
	secuencia(m32, 93);
	secuencia(m33, 96);
	secuencia(m34, 99);
	secuencia(m35, 102);
	secuencia(m36, 105);
	secuencia(m37, 108);
	secuencia(m38, 111);
	secuencia(m39, 114);
	secuencia(m40, 117);
	secuencia(m41, 120);
	secuencia(m42, 123);
	secuencia(m43, 126);
	secuencia(m44, 129);
	secuencia(m45, 132);
	secuencia(m46, 135);
	secuencia(m47, 138);
	secuencia(m48, 141);
	secuencia(m49, 144);
	secuencia(m50, 147);

	glFlush();
}

void main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(300, 300);
	glutInitWindowSize(1000, 1000);
	glutCreateWindow("Ejemplo");
	init();
	glutDisplayFunc(lineSegment);
	glutMainLoop();
}