#include <string>
#include "GL/glut.h"


void init(void) {
	glClearColor(128, 128, 128, 0);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(0.0, 155.0, 0.0, 155.0);

}

int mat[50][50] = {
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,4,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,4,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,4,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,4,4,4,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,4,3,4,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,4,4,3,4,4,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,4,3,3,3,4,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,4,3,5,3,4,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,2,2,2,2,2,2,1,4,4,3,5,3,4,4,1,2,2,2,2,2,2,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,1,1,4,3,3,5,3,3,4,1,1,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,2,2,2,2,2,2,2,1,4,4,3,5,5,5,3,4,4,1,2,2,2,2,2,2,2,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,2,2,2,2,2,2,2,1,1,4,3,3,5,2,5,3,3,4,1,1,2,2,2,2,2,2,2,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,2,2,2,2,2,2,2,1,1,1,4,4,3,5,5,2,5,5,3,4,4,1,1,1,2,2,2,2,2,2,2,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,4,4,3,3,5,2,2,2,5,3,3,4,4,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,4,4,4,3,3,5,5,2,2,2,5,5,3,3,4,4,4,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,1,1,1,4,4,4,3,3,3,5,5,2,2,2,2,2,5,5,3,3,3,4,4,4,1,1,1,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,1,1,1,1,4,4,3,3,3,5,5,5,2,2,2,2,2,2,2,5,5,5,3,3,3,4,4,4,1,1,1,1,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,1,1,1,1,4,4,4,4,3,3,5,5,5,2,2,2,2,2,1,2,2,2,2,2,5,5,5,3,3,3,4,4,4,4,1,1,1,1,2,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,4,4,4,4,3,3,3,3,5,5,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,5,5,5,3,3,3,3,4,4,4,1,1,1,1,1,1,1,1 },
	{ 1,1,1,1,1,4,4,4,3,3,3,3,5,5,5,5,2,2,2,2,2,2,1,1,1,1,1,2,2,2,2,2,2,5,5,5,5,3,3,3,3,4,4,4,1,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,4,4,4,4,3,3,3,3,5,5,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,5,5,5,3,3,3,3,4,4,4,1,1,1,1,1,1,1,1 },
	{ 1,1,1,1,2,2,1,1,1,1,4,4,4,4,3,3,5,5,5,2,2,2,2,2,1,2,2,2,2,2,5,5,5,3,3,3,4,4,4,4,1,1,1,1,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,1,1,1,1,4,4,3,3,3,5,5,5,2,2,2,2,2,2,2,5,5,5,3,3,3,4,4,4,1,1,1,1,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,1,1,1,4,4,4,3,3,3,5,5,2,2,2,2,2,5,5,3,3,3,4,4,4,1,1,1,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,4,4,4,3,3,5,5,2,2,2,5,5,3,3,4,4,4,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,4,4,3,3,5,2,2,2,5,3,3,4,4,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,2,2,2,2,2,2,2,1,1,1,4,4,3,5,5,2,5,5,3,4,4,1,1,1,2,2,2,2,2,2,2,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,2,2,2,2,2,2,2,1,1,4,3,3,5,2,5,3,3,4,1,1,2,2,2,2,2,2,2,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,2,2,2,2,2,2,2,1,4,4,3,5,5,5,3,4,4,1,2,2,2,2,2,2,2,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,2,2,2,2,2,2,1,1,4,3,3,5,3,3,4,1,1,2,2,2,2,2,2,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,2,2,2,2,2,2,1,4,4,3,5,3,4,4,1,2,2,2,2,2,2,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,1,1,4,3,5,3,4,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,4,3,3,3,4,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,2,2,1,4,4,3,4,4,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,4,3,4,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,4,4,4,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,1,1,4,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,4,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,4,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,4,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
	{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
};

//Conjunto de arreglos que trazan la secuencia de colores que llevará la cerámica.


//Este método recibe como parámetros una arreglo de enteros y un múltiplo de 3. Con estos parámetros se decide que secuencia de colores pintar según el vaslor de cada casilla del arreglo
void secuencia(int arg[], int fila) {
	int i = 0;
	int valor;
	int alfa = 0;
	double x1 = 3.1;
	double x2 = 5.9;
	double y1 = 150.1;
	double y2 = 152.9;
	double cont = 0;

	while (i < 50) {
		valor = arg[i];
		switch (valor) {
		case 1:
			glBegin(GL_POLYGON);
			glColor3f(0.5, 0.5, 0.5);//GRIS
			glVertex2f(x1 + cont, y1 - fila);//A
			glVertex2f(x1 + cont, y2 - fila);//B

			glVertex2f(x1 + cont, y2 - fila);//B
			glVertex2f(x2 + cont, y2 - fila);//C

			glVertex2f(x2 + cont, y2 - fila);//C
			glVertex2f(x2 + cont, y1 - fila);//D

			glVertex2f(x2 + cont, y1 - fila);//D
			glVertex2f(x1 + cont, y1 - fila);//A
			glEnd();
			alfa++;
			cont = cont + 3;
			break;
		case 2:
			glBegin(GL_POLYGON);
			glColor3f(0.84, 0.84, 0.74);//CAFÉ
			glVertex2f(x1 + cont, y1 - fila);//A
			glVertex2f(x1 + cont, y2 - fila);//B

			glVertex2f(x1 + cont, y2 - fila);//B
			glVertex2f(x2 + cont, y2 - fila);//C

			glVertex2f(x2 + cont, y2 - fila);//C
			glVertex2f(x2 + cont, y1 - fila);//D

			glVertex2f(x2 + cont, y1 - fila);//D
			glVertex2f(x1 + cont, y1 - fila);//A
			glEnd();
			alfa++;
			cont = cont + 3;
			break;
		case 3:
			glBegin(GL_POLYGON);
			glColor3f(1, 0, 0);//ROJO
			glVertex2f(x1 + cont, y1 - fila);//A
			glVertex2f(x1 + cont, y2 - fila);//B

			glVertex2f(x1 + cont, y2 - fila);//B
			glVertex2f(x2 + cont, y2 - fila);//C

			glVertex2f(x2 + cont, y2 - fila);//C
			glVertex2f(x2 + cont, y1 - fila);//D

			glVertex2f(x2 + cont, y1 - fila);//D
			glVertex2f(x1 + cont, y1 - fila);//A
			glEnd();
			alfa++;
			cont = cont + 3;
			break;
		case 4:
			glBegin(GL_POLYGON);
			glColor3f(0, 0.3, 0);//VERDE
			glVertex2f(x1 + cont, y1 - fila);//A
			glVertex2f(x1 + cont, y2 - fila);//B

			glVertex2f(x1 + cont, y2 - fila);//B
			glVertex2f(x2 + cont, y2 - fila);//C

			glVertex2f(x2 + cont, y2 - fila);//C
			glVertex2f(x2 + cont, y1 - fila);//D

			glVertex2f(x2 + cont, y1 - fila);//D
			glVertex2f(x1 + cont, y1 - fila);//A
			glEnd();
			alfa++;
			cont = cont + 3;
			break;
		case 5:
			glBegin(GL_POLYGON);
			glColor3f(1, 0.5, 0);//NARANJA
			glVertex2f(x1 + cont, y1 - fila);//A
			glVertex2f(x1 + cont, y2 - fila);//B

			glVertex2f(x1 + cont, y2 - fila);//B
			glVertex2f(x2 + cont, y2 - fila);//C

			glVertex2f(x2 + cont, y2 - fila);//C
			glVertex2f(x2 + cont, y1 - fila);//D

			glVertex2f(x2 + cont, y1 - fila);//D
			glVertex2f(x1 + cont, y1 - fila);//A
			glEnd();
			alfa++;
			cont = cont + 3;
			break;
		}
		alfa = 0;
		i++;
	}
}

void lineSegment(void) {
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1, 1, 1);
	//Creamos una cuadrícula que servirá como apoyo y además división de la cerámica una vez terminado.
	glBegin(GL_LINES);
	int k = 0;
	int m = 0;
	while (k < 50) {//While que crea varias columnas de cuadrados
		int i = 0;
		int j = 0;
		while (i < 50) {//While que crea una columna de cuadrados
			glVertex2f(3 + m, 3 + j);
			glVertex2f(3 + m, 6 + j);

			glVertex2f(3 + m, 6 + j);
			glVertex2f(3 + m, 6 + j);

			glVertex2f(6 + m, 6 + j);
			glVertex2f(6 + m, 3 + j);

			glVertex2f(6 + m, 3 + j);
			glVertex2f(3 + m, 3 + j);

			j = j + 3;
			i++;
		}
		m = m + 3;
		k++;
	}
	glVertex2f(3, 153);
	glVertex2f(153, 153);
	glEnd();

	//Mandamos a llamar al método secuencia, para que pinte la secuencia de colores según la matriz dada. Por cada llamada del método se pinta una línea.
	int y = 0;
	for (int i = 0; i < 50; i++)
	{
		secuencia(mat[i], y);
		y = y + 3;
	}

	glFlush();
}

void main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(300, 300);
	glutInitWindowSize(1000, 1000);
	glutCreateWindow("Cerámica");
	init();
	glutDisplayFunc(lineSegment);
	glutMainLoop();
}